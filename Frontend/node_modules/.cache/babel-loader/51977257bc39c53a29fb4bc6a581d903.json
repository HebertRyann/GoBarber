{"ast":null,"code":"var _jsxFileName = \"/home/dev/\\xC1rea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/Hooks/Toast.tsx\";\nimport React, { createContext, useContext, useCallback, useState } from 'react';\nimport ToastContainer from '../components/ToatsContainer/index';\nimport { uuid } from 'uuidv4';\nconst ToastContext = createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  const addToast = useCallback(({\n    title,\n    type,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      title,\n      type,\n      description\n    };\n    setMessages(state => [...state, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(state => state.filter(message => message.id !== id));\n  }, []);\n  const [messages, setMessages] = useState([]);\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ToastContainer, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction useToast() {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used whitin a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };","map":{"version":3,"sources":["/home/dev/√Årea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/Hooks/Toast.tsx"],"names":["React","createContext","useContext","useCallback","useState","ToastContainer","uuid","ToastContext","ToastProvider","children","addToast","title","type","description","id","toast","setMessages","state","removeToast","filter","message","messages","useToast","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AAcA,MAAMC,YAAY,GAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAD,KAA2D;AACtF,UAAMC,EAAE,GAAGR,IAAI,EAAf;AACA,UAAMS,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,KAFY;AAGZC,MAAAA,IAHY;AAIZC,MAAAA;AAJY,KAAd;AAMAG,IAAAA,WAAW,CAACC,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAUF,KAAV,CAAV,CAAX;AACD,GAT2B,EAS1B,EAT0B,CAA5B;AAWA,QAAMG,WAAW,GAAGf,WAAW,CAAEW,EAAD,IAAgB;AAC9CE,IAAAA,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACE,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACN,EAAR,KAAeA,EAAvC,CAAV,CAAX;AACD,GAF8B,EAE7B,EAF6B,CAA/B;AAGA,QAAM,CAACO,QAAD,EAAWL,WAAX,IAA0BZ,QAAQ,CAAiB,EAAjB,CAAxC;AACA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEM,MAAAA,QAAF;AAAYQ,MAAAA;AAAZ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QADH,eAEE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEY,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAOD,CAvBD;;AAyBA,SAASC,QAAT,GAAsC;AACpC,QAAMC,OAAO,GAAGrB,UAAU,CAACK,YAAD,CAA1B;;AAEA,MAAG,CAACgB,OAAJ,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;AAED,SAASf,aAAT,EAAwBc,QAAxB","sourcesContent":["import React, { createContext, useContext, useCallback, useState } from 'react';\nimport ToastContainer from '../components/ToatsContainer/index';\nimport { uuid } from 'uuidv4';\n\ninterface   ToastContextData{\n  addToast(message: Omit<ToastMessage,'id'>): void;\n  removeToast(id: string): void;\n}\n\nexport interface ToastMessage {\n  id: string;\n  type?: 'success' | 'error' | 'info';\n  title: string;\n  description?: string;\n}\n\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const addToast = useCallback(({ title, type, description }: Omit<ToastMessage,'id'>) => {\n    const id = uuid();\n    const toast = {\n      id,\n      title,\n      type,\n      description,\n    };\n    setMessages(state => [...state,toast])\n  },[]);\n\n  const removeToast = useCallback((id: string) => {\n    setMessages(state => state.filter(message => message.id !== id))\n  },[]);\n  const [messages, setMessages] = useState<ToastMessage[]>([]);\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast }}>\n      {children}\n      <ToastContainer messages={messages}/>\n    </ToastContext.Provider>\n\n  );\n}\n\nfunction useToast(): ToastContextData {\n  const context = useContext(ToastContext);\n\n  if(!context){\n    throw new Error('useToast must be used whitin a ToastProvider')\n  }\n  return context;\n}\n\nexport { ToastProvider, useToast }; "]},"metadata":{},"sourceType":"module"}