{"ast":null,"code":"var _jsxFileName = \"/home/dev/\\xC1rea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/pages/Dashboard/index.tsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Container, Header, HeaderContent, Profile, Schendule, Content, Calendar, NextAppointment, Section, Appointment } from './styles';\nimport logoImg from \"../../assets/logo.svg\";\nimport { FiClock, FiPower } from 'react-icons/fi';\nimport { useAuth } from '../../Hooks/Auth';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport api from '../../services/api';\nimport { isToday, format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\n\nconst Dashboard = () => {\n  const {\n    SignOut,\n    user\n  } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [monthAvailability, setMonthAvailability] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const handleDateChange = useCallback((day, modifiers) => {\n    if (modifiers.available) {\n      setSelectedDate(day);\n    }\n  }, []);\n  const handleMonthChange = useCallback(month => {\n    setCurrentMonth(month);\n  }, []);\n  useEffect(() => {\n    api.get(`/providers/${user.id}/month-availability`, {\n      params: {\n        year: currentMonth.getFullYear(),\n        month: currentMonth.getMonth() + 1\n      }\n    }).then(response => {\n      setMonthAvailability(response.data);\n    });\n  }, [currentMonth, user.id]);\n  useEffect(() => {\n    api.get('appointments/me', {\n      params: {\n        year: selectedDate.getFullYear(),\n        month: selectedDate.getMonth() + 1,\n        day: selectedDate.getDate()\n      }\n    }).then(response => {\n      const appoitnmentsFormatted = response.data.map(appointment => {\n        return { ...appointment,\n          hourFormatted: format(parseISO(appointment.date), 'HH:mm')\n        };\n      });\n      setAppointments(appoitnmentsFormatted);\n    });\n  }, [selectedDate]);\n  const disabledDays = useMemo(() => {\n    const dates = monthAvailability.filter(monthDay => monthDay.availability === false).map(monthDay => {\n      const year = currentMonth.getFullYear();\n      const month = currentMonth.getMonth();\n      return new Date(year, month, monthDay.day);\n    });\n    return dates;\n  }, [currentMonth, monthAvailability]);\n  const selectedDateAsText = useMemo(() => {\n    return format(selectedDate, \"'Dia' dd 'de' MMMM\", {\n      locale: ptBR\n    });\n  }, [selectedDate]);\n  const selectedWeekDay = useMemo(() => {\n    return format(selectedDate, 'cccc', {\n      locale: ptBR\n    });\n  }, [selectedDate]);\n  const morningAppointments = useMemo(() => {\n    return appointments.filter(appointment => {\n      return parseISO(appointment.date).getHours() < 12;\n    });\n  }, [appointments]);\n  const afternoonAppointments = useMemo(() => {\n    return appointments.filter(appointment => {\n      return parseISO(appointment.date).getHours() >= 12;\n    });\n  }, [appointments]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HeaderContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"GoBarber\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Profile, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: user.avatar_url,\n    alt: user.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"Bem Vindo\"), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, user.name))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: SignOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FiPower, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Schendule, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Horarios Agendados\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, isToday(selectedDate) && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 39\n    }\n  }, \"Hoje\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, selectedDateAsText), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, `${selectedWeekDay}-feira`)), /*#__PURE__*/React.createElement(NextAppointment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"Atendimento a Seguir\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://pm1.narvii.com/6598/34eaf79133f602a4accadb557ca02b933eb27352_00.jpg\",\n    alt: \"Raiva\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, \"Hebert Ryan\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \" \", /*#__PURE__*/React.createElement(FiClock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 22\n    }\n  }), \" 08:00 \"))), /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Manha\"), morningAppointments.map(appointment => /*#__PURE__*/React.createElement(Appointment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FiClock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }\n  }), \"08:00\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: appointment.user.avatar_url,\n    alt: appointment.user.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, appointment.user.name), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }, \" \", /*#__PURE__*/React.createElement(FiClock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 26\n    }\n  }), \" 08:00 \"))))), /*#__PURE__*/React.createElement(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Tarde\"), /*#__PURE__*/React.createElement(Appointment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FiClock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }), \"13:00\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://pm1.narvii.com/6598/34eaf79133f602a4accadb557ca02b933eb27352_00.jpg\",\n    alt: \"Raiva\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, \"Hebert Ryan\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \" \", /*#__PURE__*/React.createElement(FiClock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 24\n    }\n  }), \" 08:00 \"))))), /*#__PURE__*/React.createElement(Calendar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DayPicker, {\n    weekdaysShort: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],\n    fromMonth: new Date(),\n    disabledDays: [{\n      daysOfWeek: [0, 6]\n    }, ...disabledDays],\n    selectedDays: selectedDate,\n    modifiers: {\n      available: {\n        daysOfWeek: [1, 2, 3, 4, 5]\n      }\n    },\n    onDayClick: handleDateChange,\n    onMonthChange: handleMonthChange,\n    months: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/dev/Área de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/pages/Dashboard/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","Container","Header","HeaderContent","Profile","Schendule","Content","Calendar","NextAppointment","Section","Appointment","FiClock","FiPower","useAuth","DayPicker","api","isToday","format","parseISO","ptBR","Dashboard","SignOut","user","selectedDate","setSelectedDate","Date","currentMonth","setCurrentMonth","monthAvailability","setMonthAvailability","appointments","setAppointments","handleDateChange","day","modifiers","available","handleMonthChange","month","get","id","params","year","getFullYear","getMonth","then","response","data","getDate","appoitnmentsFormatted","map","appointment","hourFormatted","date","disabledDays","dates","filter","monthDay","availability","selectedDateAsText","locale","selectedWeekDay","morningAppointments","getHours","afternoonAppointments","logoImg","avatar_url","name","daysOfWeek"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Container, Header, HeaderContent, Profile, Schendule, Content, Calendar, NextAppointment, Section, Appointment } from './styles';\nimport logoImg from '../../assets/logo.svg';\nimport { FiClock, FiPower } from 'react-icons/fi';\nimport { useAuth } from '../../Hooks/Auth';\nimport DayPicker, { DayModifiers } from 'react-day-picker';\nimport 'react-day-picker/lib/style.css'\nimport api from '../../services/api';\nimport { isToday, format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\n\n\ninterface MonthAvailabilityItem {\n  day: number;\n  availability: boolean;\n}\n\ninterface Appointments {\n  id: string;\n  date: string;\n  hourFormatted: string;\n  user: {\n    name: string;\n    avatar_url: string;\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const { SignOut, user } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [currentMonth, setCurrentMonth] = useState(new Date())\n  const [monthAvailability, setMonthAvailability] = useState<MonthAvailabilityItem[]>([]);\n  const [appointments, setAppointments] = useState<Appointments[]>([]);\n\n\n  const handleDateChange = useCallback((day: Date, modifiers: DayModifiers) => {\n    if (modifiers.available) {\n      setSelectedDate(day);\n    }\n  }, []);\n\n  const handleMonthChange = useCallback((month: Date) => {\n    setCurrentMonth(month);\n  }, []);\n\n  useEffect(() => {\n    api.get(`/providers/${user.id}/month-availability`, {\n      params: {\n        year: currentMonth.getFullYear(),\n        month: currentMonth.getMonth() + 1\n      }\n    }).then(response => {\n      setMonthAvailability(response.data);\n    })\n  }, [currentMonth, user.id]);\n\n  useEffect(() => {\n    api.get<Appointments[]>('appointments/me', {\n      params: {\n        year: selectedDate.getFullYear(),\n        month: selectedDate.getMonth() + 1,\n        day: selectedDate.getDate(),\n      }\n    }).then(response => {\n      const appoitnmentsFormatted = response.data.map(appointment => {\n        return {\n          ...appointment,\n          hourFormatted: format(parseISO(appointment.date), 'HH:mm'),\n        }\n      })\n      setAppointments(appoitnmentsFormatted);\n    })\n  }, [selectedDate]);\n\n  const disabledDays = useMemo(() => {\n    const dates = monthAvailability\n      .filter(monthDay => monthDay.availability === false)\n      .map(monthDay => {\n        const year = currentMonth.getFullYear();\n        const month = currentMonth.getMonth();\n\n        return new Date(year, month, monthDay.day);\n      });\n\n    return dates;\n  }, [currentMonth, monthAvailability]);\n\n  const selectedDateAsText = useMemo(() => {\n    return format(selectedDate, \"'Dia' dd 'de' MMMM\", {\n      locale: ptBR\n    })\n  }, [selectedDate]);\n\n  const selectedWeekDay = useMemo(() => {\n    return format(selectedDate, 'cccc', {\n      locale: ptBR,\n    });\n  }, [selectedDate]);\n\n  const morningAppointments = useMemo(() => {\n    return appointments.filter(appointment => {\n      return parseISO(appointment.date).getHours() < 12;\n    })\n  }, [appointments]);\n  const afternoonAppointments = useMemo(() => {\n    return appointments.filter(appointment => {\n      return parseISO(appointment.date).getHours() >= 12;\n    })\n  }, [appointments]);\n\n  return (\n    <Container>\n      <Header>\n        <HeaderContent>\n          <img src={logoImg} alt=\"GoBarber\" />\n          <Profile>\n            <img src={user.avatar_url} alt={user.name} />\n            <div>\n              <span>Bem Vindo</span>\n              <strong>{user.name}</strong>\n            </div>\n          </Profile>\n\n          <button type=\"button\" onClick={SignOut}>\n            <FiPower />\n          </button>\n        </HeaderContent>\n      </Header>\n\n      <Content>\n        <Schendule>\n          <h1>Horarios Agendados</h1>\n          <p>\n            {isToday(selectedDate) && <span>Hoje</span>}\n            <span>{selectedDateAsText}</span>\n            <span>{`${selectedWeekDay}-feira`}</span>\n          </p>\n          <NextAppointment>\n            <strong>Atendimento a Seguir</strong>\n            <div>\n              <img src=\"https://pm1.narvii.com/6598/34eaf79133f602a4accadb557ca02b933eb27352_00.jpg\" alt=\"Raiva\" />\n              <strong>Hebert Ryan</strong>\n              <span> <FiClock /> 08:00 </span>\n            </div>\n          </NextAppointment>\n\n          <Section>\n            <strong>Manha</strong>\n\n            {morningAppointments.map(appointment => (\n              <Appointment>\n                <span>\n                  <FiClock />\n                08:00\n              </span>\n                <div>\n                  <img src={appointment.user.avatar_url} alt={appointment.user.name} />\n                  <strong>{appointment.user.name}</strong>\n                  <span> <FiClock /> 08:00 </span>\n                </div>\n              </Appointment>\n\n            ))}\n          </Section>\n\n          <Section>\n            <strong>Tarde</strong>\n\n            <Appointment>\n              <span>\n                <FiClock />\n                13:00\n              </span>\n              <div>\n                <img src=\"https://pm1.narvii.com/6598/34eaf79133f602a4accadb557ca02b933eb27352_00.jpg\" alt=\"Raiva\" />\n                <strong>Hebert Ryan</strong>\n                <span> <FiClock /> 08:00 </span>\n              </div>\n            </Appointment>\n          </Section>\n        </Schendule>\n        <Calendar >\n          <DayPicker\n            weekdaysShort={['D', 'S', 'T', 'Q', 'Q', 'S', 'S']}\n            fromMonth={new Date()}\n            disabledDays={[{ daysOfWeek: [0, 6] }, ...disabledDays]}\n            selectedDays={selectedDate}\n            modifiers={{\n              available: { daysOfWeek: [1, 2, 3, 4, 5] }\n            }}\n            onDayClick={handleDateChange}\n            onMonthChange={handleMonthChange}\n            months={[\n              'Janeiro',\n              'Fevereiro',\n              'Março',\n              'Abril',\n              'Maio',\n              'Junho',\n              'Julho',\n              'Agosto',\n              'Setembro',\n              'Outubro',\n              'Novembro',\n              'Dezembro'\n            ]}\n          />\n        </Calendar>\n      </Content>\n    </Container>\n  );\n};\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}