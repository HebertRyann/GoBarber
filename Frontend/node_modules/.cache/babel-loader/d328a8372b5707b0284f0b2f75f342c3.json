{"ast":null,"code":"var _jsxFileName = \"/home/dev/\\xC1rea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/Hooks/Auth.tsx\";\nimport React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\nconst AuthContext = createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const SignIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('/sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n    api.defaults.headers.authorization = `Bearer ${token}`;\n    setData({\n      token,\n      user\n    });\n  }, []);\n  const SignOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n    setData({});\n  }, []);\n  const updateUser = useCallback(user => {\n    setData({\n      token: data.token,\n      user\n    });\n  }, [setData, data.token]);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      SignIn,\n      SignOut,\n      updateUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used whitin an AuthProvider');\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/home/dev/√Årea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/Hooks/Auth.tsx"],"names":["React","createContext","useCallback","useState","useContext","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","defaults","headers","authorization","JSON","parse","SignIn","email","password","response","post","setItem","stringify","SignOut","removeItem","updateUser","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsDC,UAAtD,QAAwE,OAAxE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AA0BA,MAAMC,WAAW,GAAGL,aAAa,CAAc,EAAd,CAAjC;AAEA,OAAO,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD,UAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAIF,KAAK,IAAIG,IAAb,EAAmB;AACjBT,MAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAM,EAArD;AACA,aAAO;AAAEA,QAAAA,KAAF;AAASG,QAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWL,IAAX;AAAf,OAAP;AACD;;AACD,WAAO,EAAP;AACD,GAT+B,CAAhC;AAUA,QAAMM,MAAM,GAAGlB,WAAW,CAAC,OAAO;AAAEmB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP,KAA+B;AACxD,UAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CAAS,WAAT,EAAsB;AAC3CH,MAAAA,KAD2C;AAE3CC,MAAAA;AAF2C,KAAtB,CAAvB;AAKA,UAAM;AAAEX,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAkBS,QAAQ,CAACd,IAAjC;AACAG,IAAAA,YAAY,CAACa,OAAb,CAAqB,iBAArB,EAAwCd,KAAxC;AACAC,IAAAA,YAAY,CAACa,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeZ,IAAf,CAAvC;AACAT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAM,EAArD;AAEAD,IAAAA,OAAO,CAAC;AAAEC,MAAAA,KAAF;AAASG,MAAAA;AAAT,KAAD,CAAP;AACD,GAZyB,EAYvB,EAZuB,CAA1B;AAcA,QAAMa,OAAO,GAAGzB,WAAW,CAAC,MAAM;AAChCU,IAAAA,YAAY,CAACgB,UAAb,CAAwB,iBAAxB;AACAhB,IAAAA,YAAY,CAACgB,UAAb,CAAwB,gBAAxB;AACAlB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAJ0B,EAIxB,EAJwB,CAA3B;AAOA,QAAMmB,UAAU,GAAG3B,WAAW,CAAEY,IAAD,IAAgB;AAC7CJ,IAAAA,OAAO,CAAC;AACNC,MAAAA,KAAK,EAAEF,IAAI,CAACE,KADN;AAENG,MAAAA;AAFM,KAAD,CAAP;AAID,GAL6B,EAK3B,CAACJ,OAAD,EAAUD,IAAI,CAACE,KAAf,CAL2B,CAA9B;AAOA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAb;AAAmBM,MAAAA,MAAnB;AAA2BO,MAAAA,OAA3B;AAAoCE,MAAAA;AAApC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,QADH,CADF;AAKD,CA5CM;AA8CP,OAAO,SAASsB,OAAT,GAAmB;AACxB,QAAMC,OAAO,GAAG3B,UAAU,CAACE,WAAD,CAA1B;;AAEA,MAAI,CAACyB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD","sourcesContent":["import React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\n\ninterface User {\n  id: string;\n  avatar_url: string;\n  name: string;\n  email: string;\n}\n\ninterface SignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface AuthContext {\n  user: User;\n  SignIn(credentials: SignInCredentials): Promise<void>;\n  SignOut(): void;\n  updateUser(user): void;\n}\n\ninterface AuthState {\n  token: string;\n  user: User;\n}\n\nconst AuthContext = createContext<AuthContext>({} as AuthContext);\n\nexport const AuthProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return { token, user: JSON.parse(user) }\n    }\n    return {} as AuthState;\n  });\n  const SignIn = useCallback(async ({ email, password }) => {\n    const response = await api.post('/sessions', {\n      email,\n      password,\n    })\n\n    const { token, user } = response.data;\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n    api.defaults.headers.authorization = `Bearer ${token}`;\n\n    setData({ token, user });\n  }, [])\n\n  const SignOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n    setData({} as AuthState);\n  }, []);\n\n\n  const updateUser = useCallback((user: User) => {\n    setData({\n      token: data.token,\n      user,\n    })\n  }, [setData, data.token]);\n\n  return (\n    <AuthContext.Provider value={{ user: data.user, SignIn, SignOut, updateUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used whitin an AuthProvider')\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}