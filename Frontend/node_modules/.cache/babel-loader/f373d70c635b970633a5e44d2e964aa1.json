{"ast":null,"code":"var _jsxFileName = \"/home/dev/\\xC1rea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Container } from './styles';\nimport { useField } from '@unform/core';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    registerField,\n    error,\n    defaultValue\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [registerField, fieldName]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    isFilled: isFilled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    ref: inputRef\n  }, rest, {\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/dev/√Årea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Container","useField","Input","name","icon","Icon","rest","inputRef","fieldName","registerField","error","defaultValue","isFocused","setIsFocused","isFilled","setIsFilled","handleInputBlur","current","value","handleInputFocus","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,SAASC,QAAT,QAAyB,cAAzB;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACrE,QAAMC,QAAQ,GAAEV,MAAM,CAAmB,IAAnB,CAAtB;AACA,QAAM;AAACW,IAAAA,SAAD;AAAYC,IAAAA,aAAZ;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAkDV,QAAQ,CAACE,IAAD,CAAhE;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAGA,QAAMkB,eAAe,GAAGjB,WAAW,CAAC,MAAM;AAAA;;AACxCc,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACR,QAAQ,CAACU,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AAED,GALkC,EAKhC,EALgC,CAAnC;AAOA,QAAMC,gBAAgB,GAAGpB,WAAW,CAAC,MAAM;AACzCc,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIAjB,EAAAA,SAAS,CAAC,MAAI;AACZa,IAAAA,aAAa,CAAC;AACZN,MAAAA,IAAI,EAAEK,SADM;AAEZY,MAAAA,GAAG,EAAEb,QAAQ,CAACU,OAFF;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMP,CAACZ,aAAD,EAAgBD,SAAhB,CANO,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEI,SAAtB;AAAiC,IAAA,QAAQ,EAAEE,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIT,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,eAEE;AAAO,IAAA,GAAG,EAAEE;AAAZ,KAAyBD,IAAzB;AACA,IAAA,OAAO,EAAEa,gBADT;AAEA,IAAA,MAAM,EAAEH,eAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AASD,CAnCD;;AAqCA,eAAed,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { Container } from './styles';\nimport { IconBaseProps } from 'react-icons';\nimport { useField } from '@unform/core';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name ,icon: Icon, ...rest }) => {\n  const inputRef= useRef<HTMLInputElement>(null)\n  const {fieldName, registerField, error, defaultValue} = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value)\n\n  }, [])\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, [])\n\n  useEffect(()=>{\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  },[registerField, fieldName]);\n\n  return (\n    <Container isFocused={isFocused} isFilled={isFilled}>\n      { Icon && <Icon size={20} />}\n      <input ref={inputRef}{...rest} \n      onFocus={handleInputFocus}\n      onBlur={handleInputBlur}\n      />\n    </Container>\n  );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}