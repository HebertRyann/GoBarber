{"ast":null,"code":"var _jsxFileName = \"/home/dev/\\xC1rea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Container, Error } from './styles';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    error,\n    defaultValue,\n    registerField\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [registerField, fieldName]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isErrored: !!error,\n    isFocused: isFocused,\n    isFilled: isFilled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    name: name,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  })), error && /*#__PURE__*/React.createElement(Error, {\n    title: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FiAlertCircle, {\n    size: 20,\n    color: '#c53030',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/dev/√Årea de Trabalho/DevProjetos/Projetos/GoBarber/Frontend/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Container","Error","FiAlertCircle","useField","Input","name","icon","Icon","rest","inputRef","fieldName","error","defaultValue","registerField","isFocused","setIsFocused","isFilled","setIsFilled","handleInputBlur","current","value","handleInputFocus","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACrE,QAAMC,QAAQ,GAAGZ,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAAoDV,QAAQ,CAACE,IAAD,CAAlE;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMoB,eAAe,GAAGnB,WAAW,CAAC,MAAM;AAAA;;AACxCgB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACR,QAAQ,CAACU,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AAED,GALkC,EAKhC,EALgC,CAAnC;AAOA,QAAMC,gBAAgB,GAAGtB,WAAW,CAAC,MAAM;AACzCgB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,aAAa,CAAC;AACZR,MAAAA,IAAI,EAAEK,SADM;AAEZY,MAAAA,GAAG,EAAEb,QAAQ,CAACU,OAFF;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACV,aAAD,EAAgBH,SAAhB,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACC,KAAxB;AAA+B,IAAA,SAAS,EAAEG,SAA1C;AAAqD,IAAA,QAAQ,EAAEE,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIT,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,eAEE;AACE,IAAA,IAAI,EAAEF,IADR;AAEE,IAAA,OAAO,EAAEgB,gBAFX;AAGE,IAAA,MAAM,EAAEH,eAHV;AAIE,IAAA,YAAY,EAAEN,YAJhB;AAKE,IAAA,GAAG,EAAEH;AALP,KAMMD,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAYGG,KAAK,iBACJ,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAE,EAArB;AAAyB,IAAA,KAAK,EAAE,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbJ,CADF;AAoBD,CA7CD;;AA+CA,eAAeP,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from \"react\";\nimport { Container, Error } from './styles';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport Toottip from '../Tooltip';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n  const { fieldName, error, defaultValue, registerField } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value)\n\n  }, [])\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, [])\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [registerField, fieldName]);\n\n  return (\n    <Container isErrored={!!error} isFocused={isFocused} isFilled={isFilled}>\n      { Icon && <Icon size={20} />}\n      <input\n        name={name}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle size={20} color={'#c53030'} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}